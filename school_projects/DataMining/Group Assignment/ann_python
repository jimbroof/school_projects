# -*- coding: utf-8 -*-
"""
Created on Tue May  2 01:24:16 2017

@author: Lisa Denzer
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import plotly.plotly as py
import plotly.graph_objs as go
# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense


# Importing the dataset
# Importing the dataset
dataset = pd.read_csv("C:/Users/Lisa Denzer/Google Drive/IT University of Copenhagen/3rd Sem 2017/Data Mining/Group Project/videogame_data.csv")

#
df = pd.DataFrame(dataset, columns = ['Name', 'Platform', 'Year_of_Release', 'Genre', 'Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'Critic_Score','Critic_Count', 'User_Score', 'User_Count', 'Developer', 'Rating'])

dataset.describe()
dataset.count()

a = pd.Series(dataset.Year_of_Release)
a.hist()

#change the type of the column
df.Name = pd.Categorical(df.Name)
df.Platform = pd.Categorical(df.Platform)
df.Genre = pd.Categorical(df.Genre)
df.Publisher = pd.Categorical(df.Publisher)
df.Developer = pd.Categorical(df.Developer)
df.Rating = pd.Categorical(df.Rating)
        
#capture the category codes
df['NameCode'] = df.Name.cat.codes
df['PlatformCode'] = df.Platform.cat.codes 
df['GenreCode'] = df.Genre.cat.codes
df['PublisherCode'] = df.Publisher.cat.codes
df['DeveloperCode'] = df.Developer.cat.codes
df['RatingCode'] = df.Rating.cat.codes

#Number of non-null observations
df.count()

#year from float to int 
X = df.iloc[:, [16, 18, 21]].values
y = df.iloc[:, 17].values

np.any(np.isnan(df.Year_of_Release))
np.any(np.isnan(df.GenreCode))
np.any(np.isnan(df.RatingCode))

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_1 = LabelEncoder()
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()
X = X[:, 1:]

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Part 2 - Now let's make the ANN!

# Initialising the ANN
classifier = Sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 11))

# Adding the second hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu'))

# Adding the output layer
classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Fitting the ANN to the Training set
classifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)

# Part 3 - Making the predictions and evaluating the model

# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
